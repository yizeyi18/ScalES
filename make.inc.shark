#
#  The platform identifier to suffix to the end of library names
#
PLAT         = SHARK
#
#  The directories to find the various libraries
#
BINdir       = /home/linlin/projectBIN/dgdft/force
FFTWdir      = /usr/include
LOBPCGDIR    = LOBPCG
#
#  The name of the libraries to be created/linked to
#
FFTWLIB      = -lfftw3
IPMLIB       = -L/opt/ipm/lib -lipm

MKLPATH = /opt/intel/Compiler/11.1/072/mkl/lib/em64t
MKLINC  = /opt/intel/Compiler/11.1/072/mkl/include
MKL = -Wl,--start-group $(MKLPATH)/libmkl_scalapack_lp64.a $(MKLPATH)/libmkl_blacs_intelmpi_lp64.a $(MKLPATH)/libmkl_intel_lp64.a $(MKLPATH)/libmkl_sequential.a $(MKLPATH)/libmkl_core.a -Wl,--end-group -lpthread -lm
#MKL = -Wl,--start-group $(MKLPATH)/libmkl_scalapack_lp64.a $(MKLPATH)/libmkl_blacs_intelmpi_lp64.a $(MKLPATH)/libmkl_intel_lp64.a $(MKLPATH)/libmkl_gnu_thread.a $(MKLPATH)/libmkl_core.a -Wl,--end-group -lpthread -lm -lgomp

LOBPCG_LIB   = LOBPCG/libBLOPEX.a

ALIBS        = $(FFTWLIB) $(LOBPCG_LIB) -L$(MKLPATH) -I$(MKLINC) $(MKL) 

MODE	     = run

############################################################################
#  Make our own suffixes' list.
#
.SUFFIXES:
.SUFFIXES:      .c	.o
.SUFFIXES:      .cpp    .o

#
#  Command to build .o files from .c files.
#
.c.o:
	$(CC) -c $(CFLAGS) $(CCDEFS) $<
.cpp.o:
	$(CPP) -c $(CFLAGS) $(CPPDEFS) $<
.f.o:
	$(FC) -c $(FFLAGS) $<
############################################################################

#
#  Various compilation programs and flags.
#  You need to make sure these are correct for your system.
#
INCLUDE      = -I. -I$(FFTWdir) -I$(LOBPCGDIR) -I$(MKLINC)
NOOPTS       =
CC           = mpicc 
CPP          = mpic++
LOADER       = mpic++
FC           = gfortran
FFLAGS       = -O3


ifeq ($(MODE),run)
  CFLAGS       = -O3 -Wno-sign-compare -Wno-unused -MMD $(INCLUDE) -fPIC
  LOADOPTS     = -O3
endif

ifeq ($(MODE),profile)
  CFLAGS       = -g -pg -MMD $(INCLUDE) -fPIC
  LOADOPTS     = -pg
endif

ifeq ($(MODE),debug)
  CFLAGS       = -g -MMD $(INCLUDE) -fPIC
  LOADOPTS     = 
endif

ifeq ($(MODE),profilerun)
  CFLAGS       = -O3 -pg -MMD $(INCLUDE) -fPIC
  LOADOPTS     = -O3 -pg
endif


#
#  C preprocessor defs for compilation (-DNoChange, -DAdd_, -DAdd__ or -DUpCase)
#
CCDEFS        = 
CPPDEFS       = -DAdd_ -D__cplusplus


AR           = ar
ARFLAGS      = cr
#  For System V based machine without ranlib, like Cray and SGI,
#  use touch instead.
#RANLIB      = touch
RANLIB       = ranlib

RM           = rm
RMFLAGS      = -f


