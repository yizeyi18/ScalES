#
#  The platform identifier to suffix to the end of library names
#
PLAT         = TACC
#
#  The directories to find the various libraries
#
FFTWdir      = /usr/include
LOBPCGDIR    = ../SRC/LOBPCG
#
#  The name of the libraries to be created/linked to
#
FFTWLIB      = -L$(TACC_FFTW3_LIB) -lfftw3
MKL          = -Wl,-rpath,$(TACC_MKL_LIB) -L$(TACC_MKL_LIB) -lmkl_em64t -liomp5 -lpthread
ARPACK_LIB   = /opt/ARPACK/libarpack_LINUX.a
ARPACKPP_INC    = /opt/arpack++/include 
FORTRAN_LIB      = -lgfortran
LOBPCG_LIB = ../SRC/LOBPCG/libBLOPEX.a

#ALIBS        = $(FFTWLIB) $(LAPACKLIB) $(BLASLIB) $(LOBPCG_LIB) $(FORTRAN_LIB)
ALIBS        = $(FFTWLIB) $(LOBPCG_LIB) $(MKL)

MODE	     = run

############################################################################
#  Make our own suffixes' list.
#
.SUFFIXES:
.SUFFIXES:      .c	.o
.SUFFIXES:      .cpp    .o

#
#  Command to build .o files from .c files.
#
.c.o:
	$(CC) -c $(CCFLAGS) $(CCDEFS) $<
.cpp.o:
	$(CPP) -c $(CPPFLAGS) $(CPPDEFS) $<
.f.o:
	$(FC) -c $(FFLAGS) $<
############################################################################

#
#  Various compilation programs and flags.
#  You need to make sure these are correct for your system.
#
INCLUDE      = -I../SRC -I$(FFTWdir) -I$(LOBPCGDIR) -I$(TACC_MKL_INC) -I$(TACC_FFTW3_INC)
NOOPTS       =
CC           = mpicc
CPP          = mpicxx
LOADER       = mpicxx
FC           = gfortran
FFLAGS       = -O3


ifeq ($(MODE),run)
  CCFLAGS       = -O3 $(INCLUDE) -fPIC
  CPPFLAGS       = -O3 $(INCLUDE) -fPIC
  LOADOPTS     = -O3 
endif

ifeq ($(MODE),profile)
  CCFLAGS       = -g -pg   $(INCLUDE) -fPIC
  CPPFLAGS       = -g -pg   $(INCLUDE) -fPIC
  LOADOPTS     = -pg 
endif

ifeq ($(MODE),debug)
  CCFLAGS       = -g  $(INCLUDE) -fPIC
  CPPFLAGS       = -g  $(INCLUDE) -fPIC
  LOADOPTS     = 
endif

#
#  C preprocessor defs for compilation (-DNoChange, -DAdd_, -DAdd__ or -DUpCase)
#
CCDEFS        = 
CPPDEFS       = -DAdd_ -D__cplusplus


AR           = ar
ARFLAGS      = cr
#  For System V based machine without ranlib, like Cray and SGI,
#  use touch instead.
#RANLIB      = touch
RANLIB       = ranlib

RM           = rm
RMFLAGS      = -f


