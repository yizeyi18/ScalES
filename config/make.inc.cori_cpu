#/usr/bin/bash

COMPILE_MODE     = release
#COMPILE_MODE     = debug
USE_COMPLEX      = 0
USE_OPENMP       = 0
USE_PROFILE      = 0
USE_PEXSI        = 0
DEVICE           =  

ifeq (${COMPILE_MODE}, release)
  COMPILE_DEF    = -DRELEASE
  #COMPILE_FLAG   = -fast -w -D GPUDIRECT -no-ipo
  #COMPILE_FLAG   = -fast -w -no-ipo -std=c++11
  COMPILE_FLAG   = -O3 -w -std=c++11 
endif
ifeq (${COMPILE_MODE}, debug)
  COMPILE_DEF    = -DDEBUG=1
  COMPILE_FLAG   = -O2 -w
endif

ifeq (${USE_COMPLEX}, 1)
  SCALAR_DEF    = -DCPX
endif

ifeq (${USE_OPENMP}, 1)
  OPENMP_DEF   = -DOPENMP
  OPENMP_FLAG  = -fopenmp
endif

ifeq (${USE_PROFILE}, 1)
  PROFILE_FLAG  = -g -pg
endif

ifeq (${USE_PEXSI}, 1)
  PEXSI_DEF        = -DPEXSI

  PEXSI_DIR        = /ccs/home/jiawl/DG/crd-pexsi
  DSUPERLU_DIR     = /ccs/home/jiawl/software/SuperLU_DIST_5.1.1
  METIS_DIR        = /ccs/home/jiawl/software/parmetis/lib
  SCOTCH_DIR       = 

  PEXSI_INCLUDE    = -I$(PEXSI_DIR)/include
  PEXSI_SRC_LIB    = ${PEXSI_DIR}/src/libpexsi_edison_v0.10.0.a
  DSUPERLU_LIB     = ${DSUPERLU_DIR}/lib/libsuperlu_dist5.1.1.a
  SCOTCH_LIB       = -L${SCOTCH_DIR} -lptscotchparmetis -lptscotch -lptscotcherr -lscotch
  METIS_LIB        = ${METIS_DIR}/libmetis.a
  PEXSI_LIB        = ${PEXSI_SRC_LIB} ${DSUPERLU_LIB} ${SCOTCH_LIB}  ${METIS_LIB} 
  PEXSI_LIB        = ${PEXSI_SRC_LIB} ${DSUPERLU_LIB} ${METIS_LIB} 
endif

DGDFT_DIR     = /global/homes/j/jiawl/GPU/cpu

ifeq (${DEVICE}, nvgpu)
  NVCC = nvcc
  CUDA_FLAG =  -D DEVICE  -I ${DGDFT_DIR}/src/common/device/ -I ${DGDFT_DIR}/src/common/device/nvgpu -I ${CUDA_DIR}/include
  CUDA_DIR = /usr/common/software/cuda/10.2.89
  CUDA_LIB = -L${CUDA_DIR}/lib64 -lcufft -lcublas -lcudart -lcusolver #-lmagma #-lmagma_sparse #-lcudadevrt
  # NVCCFLAG = -gencode arch=compute_70,code=sm_70 -DGPU -I ../include -DSYNC  # for debug purpose
  NVCCFLAG = -gencode arch=compute_70,code=sm_70 -DGPU -I ../include 
endif


# inclues
BLOPEX_INCLUDE   = -I${DGDFT_DIR}/external/blopex
FFTW_DIR         = /opt/fftw/3.3.0.1/x86_64/include
FFTW_INCLUDE     = -I${FFTW_DIR}/include
DGDFT_INCLUDE    = -I${DGDFT_DIR}/src/pwdft -I${DGDFT_DIR}/src/common 
INCLUDES         = ${DGDFT_INCLUDE} ${PEXSI_INCLUDE} ${LIBXC_INCLUDE} ${BLOPEX_INCLUDE} ${FFTW_INCLUDE} ${MAGMA_INC}

# Libraries
LIBXC_DIR     = /project/projectdirs/m2033/cori_GPU/libxc-gcc
LIBXC_DIR        = /global/homes/j/jiawl/2edison/software/libxc
LIBXC_LIB        = $(LIBXC_DIR)/lib/libxc.a
LIBXC_INCLUDE    = -I$(LIBXC_DIR)/include
#SCALAPACK_LIB    = -lscalapack
#LAPACK_LIB       = -llapack -lblas 
BLOPEX_LIB       = #${DGDFT_DIR}/external/blopex/libblopex.a 
FFTW_LIB         = -lifcore  -llapack -lblas -lmkl_blacs_openmpi_lp64 -lmkl_scalapack_lp64 -mkl=cluster ${FFTW_DIR}/lib/libfftw3_mpi.a ${FFTW_DIR}/lib/libfftw3.a
FFTW_LIB         = -lifcore  -llapack -lblas -mkl=cluster ${FFTW_DIR}/lib/libfftw3_mpi.a ${FFTW_DIR}/lib/libfftw3.a
#FFTW_LIB         = -lgfortran -llapack -lblas  -L/opt/cray/pe/fftw/3.3.8.6/x86_64/lib -lfftw3_mpi -lfftw3 -lpthread -lm -lstdc++ # -lscalapack
FFTW_LIB         = -L/opt/fftw/3.3.0.1/x86_64/lib -lfftw3_mpi -lfftw3 -lm
#FFTW_LIB         = -lfftw3_mpi -lfftw3
#MKL_LIB          =  -lstdc++  -lpthread -lm -lgfortran -mkl=cluster
#MKL_LIB          =  -mkl=cluster


DGDFT_LIB    = ${DGDFT_DIR}/src/common/libcommon.a
RQRCP_LIB    = ${DGDFT_DIR}/external/rqrcp/librqrcp.a
LBFGS_LIB    = ${DGDFT_DIR}/external/lbfgs/liblbfgs.a
LIBS         = ${DGDFT_LIB} ${PEXSI_LIB} ${LIBXC_LIB}  ${FFTW_LIB} ${SCALAPACK_LIB} ${LAPACK_LIB} ${MKL_LIB} ${CUDA_LIB} ${RQRCP_LIB} ${LBFGS_LIB}

CC           = cc
CXX          = CC
FC           = ftn
LOADER       = CC

AR           = ar
ARFLAGS      = rvcu
# For System V based machine without ranlib, like Cray and SGI,
# use touch instead.
#RANLIB      = touch
RANLIB       = ranlib

RM           = rm
RMFLAGS      = -f

# Different compiling and linking options.
#


CFLAGS       = ${COMPILE_FLAG} ${OPENMP_FLAG} ${PROFILE_FLAG} ${INCLUDES} ${CUDA_FLAG}
FFLAGS       = ${COMPILE_FLAG} ${OPENMP_FLAG} ${PROFILE_FLAG} ${INCLUDES} ${CUDA_FLAG}
CXXFLAGS     = ${COMPILE_FLAG} ${OPENMP_FLAG} ${PROFILE_FLAG} ${INCLUDES} ${CUDA_FLAG}
CCDEFS       = ${COMPILE_DEF} ${PEXSI_DEF} ${SCALAR_DEF} ${OPENMP_DEF} ${CUDA_FLAG}
CPPDEFS      = ${COMPILE_DEF} ${PEXSI_DEF} ${SCALAR_DEF} ${OPENMP_DEF} ${CUDA_FLAG}
LOADOPTS     = ${OPENMP_FLAG} ${PROFILE_FLAG} ${LIBS} 


# Compilation replacement rules

%.o: %.c
	${CC} -c ${CFLAGS} ${CCDEFS} $< 
%.o: %.cpp
	${CXX} -c ${CXXFLAGS} ${CPPDEFS} $< 
%.o: %.f
	${FC} -c ${FFLAGS} $<
%.o: %.F
	${FC} -c ${FFLAGS} $<
%.o: %.f90
	${FC} -c ${FFLAGS} $<
%.o: %.F90
	${FC} -c ${FFLAGS} $<
%.o: %.cu
	$(NVCC) -c ${NVCCFLAG} $<

# Generate auto-dependencies (for cpp files now)
%.d: %.cpp
	@set -e; rm -f $@; \
	$(CXX) -M $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@;\
	rm -f $@.$$$$
